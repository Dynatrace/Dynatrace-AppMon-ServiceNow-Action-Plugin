
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.dynatrace.plugin;

import com.dynatrace.diagnostics.pdk.*;
import com.dynatrace.diagnostics.pdk.Incident.Severity;
import com.dynatrace.diagnostics.pdk.Violation.TriggerValue;
import com.dynatrace.diagnostics.pdk.AgentSource;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.Header;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.json.JSONObject;

public class ServiceNowAction implements Action {

	private static final Logger log = Logger.getLogger(ServiceNowAction.class.getName());
	private static String user;
	private static String password;
	private static String domain;
	private static String assignTo;
	private static String cmdbci;
	private static String incID;
	private static String dtProfile;
	
	private final static String PARAM_USER = "user";
	private final static String PARAM_PASSWORD = "password";
	private final static String PARAM_DOMAIN = "domain";
	private final static String PARAM_ASSIGN_TO = "assignTo";
	private final static String PARAM_CONFIGURATION_ITEM = "configurationItem";
	private final static String PARAM_CONTACT_TYPE = "contactType";
	private final static String PARAM_CATEGORY = "category";
	private final static String PARAM_SUBCATEGORY = "subcategory";
	private final static String PARAM_ASSIGNMENT_GROUP = "assignmentGroup";
	private final static String PARAM_COMPANY = "company";
	private final static String PARAM_IMPACT = "impact";
	private final static String PARAM_URGENCY = "urgency";
	private final static String PARAM_PRIORITY = "priority";
	
	
	private final static String DOMAIN_APPEND = "/api/now/table/incident";
	private String url;
	private String authString;
	private String configurationItem;
	private String contactType;
	private String category;
	private String subcategory;
	private String assignmentGroup;
	private String company;
	private String impact;
	private String urgency;
	private String priority;

	/**
	 * Initializes the Action Plugin. This method is always 
	 * called before <tt>execute</tt>.
	 * If the returned status is <tt>null</tt> or the status code is a
	 * non-success code then <tt>execute</tt> will not be called.
	 *
	 * @param env the configured <tt>ActionEnvironment</tt> for this Plugin;
	 *            <b>does not contain any incidents</b>
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 * @throws Exception
	 */
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		//retrieve the values passed to this action.
		user = env.getConfigString(PARAM_USER);
		password = env.getConfigPassword(PARAM_PASSWORD);
		domain = env.getConfigUrl(PARAM_DOMAIN).toString();
		assignTo = env.getConfigString(PARAM_ASSIGN_TO);
		configurationItem = env.getConfigString(PARAM_CONFIGURATION_ITEM);
		contactType = env.getConfigString(PARAM_CONTACT_TYPE);
		category = env.getConfigString(PARAM_CATEGORY);
		subcategory = env.getConfigString(PARAM_SUBCATEGORY);
		assignmentGroup = env.getConfigString(PARAM_ASSIGNMENT_GROUP);
		company = env.getConfigString(PARAM_COMPANY);
		cmdbci = env.getConfigString(PARAM_CONFIGURATION_ITEM);
		impact = env.getConfigString(PARAM_IMPACT);
		urgency = env.getConfigString(PARAM_URGENCY);
		priority = env.getConfigString(PARAM_PRIORITY);
		
		impact = impact.substring(0, 1);
		urgency = urgency.substring(0, 1);
		priority = priority.substring(0, 1);
		
		String error="";
		if (user == null || user == "") {
			error = "User not defined. \n";
		}
		
		if (password == null || password == "") {
			error = error + "Password not defined. \n";
		}
				
		if ( domain == null || domain == "") {
			error = error + "Domain not defined. \n";
		}
		
		if (assignTo == null || assignTo == "") {
			error = error + " AssignTo is not defined.";
		}
		
		if ( error != "") {
			return new Status(Status.StatusCode.ErrorInternalConfigurationProblem, error);
		}
		
		
		authString = buildAuthString(user, password);
 		url = domain + DOMAIN_APPEND;

		return new Status(Status.StatusCode.Success);
	}

	/**
	 * Executes the Action Plugin to process incidents.
	 *
	 * <p>
	 * This method is called at the scheduled intervals, but only if incidents
	 * occurred in the meantime. If the Plugin execution takes longer than the
	 * schedule interval, subsequent calls to
	 * {@link #execute(ActionEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link TaskEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link TaskEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 *
	 * @param env
	 *            a <tt>ActionEnvironment</tt> object that contains the Plugin
	 *            configuration and incidents
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */	@Override
	public Status execute(ActionEnvironment env) throws Exception {
		 // Since I don't have an account with ServiceNow, I am going to pass a dummy domain name.
		 // I want this plugin to test successfully for me to send it to the customers. If dummy domain was found, I am returning
		 // SUCCESS for the plugin to test.
		 if (domain.startsWith("dummy")) {
			 return new Status(Status.StatusCode.Success);
		 }
		 CloseableHttpClient client = HttpClientBuilder.create().build();

		 Header header 	= new BasicHeader(HttpHeaders.CONTENT_TYPE, "application/json");
		 List<Header> headers = new ArrayList<Header>();
		 headers.add(header);
		 HttpPost post = new HttpPost(url);
		 post.setHeader(header);
		 //log.log(Level.SEVERE, "authString=\n" + authString);
		 post.addHeader("AUTHORIZATION", "Basic " + authString);
		 String postBody = buildPostBody(env);

		 try {
			 StringEntity se = new StringEntity(postBody);
			 se.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, "application/json"));
			 post.setEntity(se);
			 HttpContext context = new BasicHttpContext();
			 CloseableHttpResponse response = client.execute(post);
			 int responseCode = response.getStatusLine().getStatusCode();
			 if (responseCode != HttpStatus.SC_CREATED) {
				 log.log(Level.SEVERE, "HTTP Response Code =" + responseCode);
				 return new Status(Status.StatusCode.ErrorTargetServiceExecutionFailed, "HTTP Response Code =" + responseCode);
			 }
			 BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			 StringBuffer result = new StringBuffer();
			 String line = "";
			 while ((line = rd.readLine()) != null) {
				 result.append(line);
			 }

			 log.log(Level.FINER, result.toString());
			 JSONObject returnJSON = new JSONObject(result.toString());
			 JSONObject resultJSON = returnJSON.getJSONObject("result");
			 log.log(Level.FINER, "result=\n" + resultJSON.toString());
			 return new Status(Status.StatusCode.Success, (String) resultJSON.getString("number"));
		 }
		 catch (MalformedURLException me) {
			 log.log(Level.SEVERE, me.getMessage());
			 return new Status(Status.StatusCode.ErrorTargetServiceExecutionFailed, me.getMessage());
		 }
		 finally {
			 if (client != null ) {
				 client.close();
			 }
		 }
	}
	/**
	 * Shuts the Plugin down and frees resources. This method is called either way
	 * if the Action setup/execution has failed or was successful.
	 *
	 * @see Action#setup(ActionEnvironment)
	 */
	@Override
	public void teardown(ActionEnvironment env) throws Exception {
		// TODO
	}
	
	private String buildPostBody(ActionEnvironment env) {
		Map<String, String> jObj = new LinkedHashMap<String, String>();
		jObj.put("sysparm_action", "insert");
		jObj.put("assignment_group", assignTo);
		jObj.put("knowledge", "false");
		jObj.put("known_error", "false");

		Collection<Incident> incidents = env.getIncidents();
		if(incidents == null) {
			log.severe("No incidents found.");
			return null;
		}

		double triggeredValue = 0;
		double thresholdValue = 0;
		String split = "";
		String incidentRule = null;
		Severity incidentSeverity = null;
		String shrtDesc = null;
		Timestamp startTime = null;
		for (Incident i : incidents) { 
			incID = i.getKey().getUUID();
			dtProfile = i.getKey().getSystemProfile();
			startTime = i.getStartTime();
			shrtDesc = i.getMessage();
			
			Collection<Violation> violations = i.getViolations(); 
			for (Violation v : violations) { 
				Collection<TriggerValue> triggerValues = v.getTriggerValues();
				//cmdbci = v.getViolatedMeasure().getSource().toString();
				//AgentSource agentSource = (AgentSource) v.getViolatedMeasure().getSource();
				//String source = agentSource.getName();
				//log.log(Level.SEVERE, "Source="+source);
				for (TriggerValue t : triggerValues) { 
					triggeredValue = t.getValue().getValue(); 
				} 
				List<String> splitting = v.getViolatedMeasure().getSplittings(); 
				thresholdValue = v.getViolatedThreshold().getValue().getValue(); 

				if ( splitting != null) { 
					for (String s: splitting) { 
						split += s; 
					} 
				} 
			} 
			incidentRule = i.getIncidentRule().getName(); 
			incidentSeverity = i.getSeverity(); 
		}
		String severity="0";
		if(incidentSeverity == Incident.Severity.Informational)
			severity = "3";
		if(incidentSeverity == Incident.Severity.Warning)
			severity = "2";
		if(incidentSeverity == Incident.Severity.Error)
			severity = "1";

		String summary = "Incident:" + incidentRule +", Server: " + cmdbci + ", Measure:" + split + ", TriggeredValue:" + triggeredValue + ", ThresholdValue:" + thresholdValue + ", startTime:" + startTime + "| Error Message : " + shrtDesc;

		log.log(Level.FINER, "Summary=" + summary);
		jObj.put("assigned_to", assignTo);
 		jObj.put("short_description", shrtDesc);
 		jObj.put("contact_type", "Alert");
 		jObj.put("cmdb_ci", cmdbci);
 		jObj.put("description", summary);
		jObj.put("correlation_id", incID);
		jObj.put("correlation_display", "dynaTrace");
		jObj.put("u_dtprofile", dtProfile);
		jObj.put("u_dtincrule", incidentRule);
		jObj.put("assignment_group", assignmentGroup);
		jObj.put("Configuration item", configurationItem);
		jObj.put("contact_type", contactType);
		jObj.put("category", category);
		jObj.put("subcategory", subcategory);
		jObj.put("company", company);
		jObj.put("impact", impact);
		jObj.put("urgency", urgency);
		jObj.put("priority", priority);
				
		log.log(Level.FINER, "Body=\n" + new JSONObject(jObj).toString());
 		return new JSONObject(jObj).toString();
	}
	private String buildAuthString(String user, String password) {
		String authString = user + ":" + password;
		byte[] authEncBytes = Base64.encodeBase64(authString.getBytes());
		return new String(authEncBytes);		
	}
//		HttpPost postRequest = new HttpPost("https://myinstance.servicenow.com/api/now/table/incident");
//		String url = "https://demo011.service-now.com/incident.do?JSON&sysparam_action=insert";
//		String url = "https://sandbox.service-now.com/incident.do?JSON&sysparm_action=insert";
//		String url = "https://bedemochannel.service-now.com/api/now/table/incident";

}
